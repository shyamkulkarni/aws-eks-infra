apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: shop
data:
  DATABASE_URL: "postgresql://postgres:postgrespw@shop-postgres-postgresql.shop.svc.cluster.local:5432/postgres"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: shop
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
      - name: api
        image: python:3.9-slim
        command: ["/bin/sh"]
        args: ["-c", "pip install fastapi uvicorn psycopg2-binary && cd /app && python main.py"]
        env:
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: DATABASE_URL
        ports:
        - containerPort: 80
        readinessProbe:
          httpGet:
            path: /healthz
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: 80
          initialDelaySeconds: 45
          periodSeconds: 10
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        volumeMounts:
        - name: app
          mountPath: /app
      volumes:
      - name: app
        projected:
          sources:
          - configMap:
              name: api-code
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-code
  namespace: shop
data:
  main.py: |
    from fastapi import FastAPI
    import os, psycopg2
    import time

    app = FastAPI()

    def get_db_connection():
        url = os.environ.get("DATABASE_URL")
        max_retries = 5
        for i in range(max_retries):
            try:
                conn = psycopg2.connect(url)
                return conn
            except psycopg2.OperationalError as e:
                if i < max_retries - 1:
                    print(f"Database connection failed, retrying in 2 seconds... ({i+1}/{max_retries})")
                    time.sleep(2)
                else:
                    raise e

    @app.get("/healthz")
    def health():
        return {"ok": True}

    @app.get("/items")
    def items():
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("CREATE TABLE IF NOT EXISTS items(id serial primary key, name text);")
                cur.execute("INSERT INTO items(name) VALUES('apple') ON CONFLICT DO NOTHING;")
                cur.execute("INSERT INTO items(name) VALUES('banana') ON CONFLICT DO NOTHING;")
                cur.execute("INSERT INTO items(name) VALUES('orange') ON CONFLICT DO NOTHING;")
                conn.commit()
                cur.execute("SELECT id, name FROM items LIMIT 10;")
                return [{"id": r[0], "name": r[1]} for r in cur.fetchall()]

    if __name__ == "__main__":
        import uvicorn
        uvicorn.run("main:app", host="0.0.0.0", port=80)
---
apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: shop
spec:
  selector:
    app: api
  ports:
  - port: 80
    targetPort: 80